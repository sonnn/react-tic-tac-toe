import React from 'react'

const About = () =>
(
  <div>
    <h1>About</h1>

    <h2>Technologies</h2>
    <p>The app is using the below technologies:</p>
    <ul>
      <li><a href="https://facebook.github.io/react/" target="_blank">React</a> - for building the client-size app and components</li>
      <li><a href="https://webpack.github.io/" target="_blank">Webpack</a> - for bundling and building</li>
      <li><a href="https://babeljs.io/" target="_blank">Babel.js</a> - for compiling Es6 and JSX</li>
      <li><a href="https://mobx.js.org/" target="_blank">Mobx</a> - for State management</li>

      <li><a href="https://github.com/ReactTraining/react-router" target="_blank">React Router</a> - for client-side (browser) routing</li>
      <li><a href="https://react-bootstrap.github.io/" target="_blank">React Bootstrap</a> - for building the UI / make the app responsive</li>
      <li>Lodash</li>
      <li><a href="http://eslint.org/" target="_blank">ESLint</a> - for ES6 linting using the <a href="http://standardjs.com/" target="_blank">JavaScript Standard Style</a></li>
    </ul>

    <h2>File Structure</h2>

    <h3>General</h3>
    <p>
      Nothing special is happening on the <code>root</code> level of the repository. The only files that probably need furher explanation are the <code>index.html, package.json and webpack.config.babel.js</code>.
    </p>
    <p>
      Let's start from the most important, <code>webpack.config.babel.js</code>. The specific file is responsible for the bundling / transpilation. The .babel extension of the file allows <a href="http://stackoverflow.com/questions/31903692/how-can-i-use-es6-in-webpack-config-js" target="_blank">ES6 code into webpackconfig</a>! This file extracts 2 webpack configurations depending which npm script you execute. So on top of a basic configuration (<code>baseConfig</code>) I'm adding the dev configuration (<code>developmentConfig</code>), when the npm command is <code>npm start</code>, and the production  configuration (<code>productionConfig</code>) when the npm command is <code>npm run build</code>. The main differences is that dev config is starting the webpack dev server, while the production config applies is optimizing the bundled file.
    </p>
    <p>
      The <code>package.json</code> holds our dependencies and scripts (nothing special) and finally the <code>index.html</code> is automatickally generated by the <code>HtmlWebpackPlugin</code>, and it's only purpose is load the bundled JS file. This is also the file that is being served from from Github.io. Everything else are just confiration files for [babel](https://babeljs.io/), editor, [ESLint](http://eslint.org/) and git (files <code>.babelrc, .editorconfig, .eslintrc, .gitignore)</code>
      </p>

    <h3>React App</h3>
    <p>
      The entire source code of the react app is located under the <code>app</code> directory. The <code>index.html</code> is the "blueprint" for generating the index.html on the root directory - nothing special. The <code>index.js</code> is responsible for the initialization of the app. It renders the react app into the div element (with id #app), after injecting the gameStore (main store of our app) to the app (more information below).
    </p>
    <p>
      All the other files are located into directories depending their purpose and functionality. The directories are the below:
    </p>
    <ul>
      <li><strong>Containers</strong>: Contains all the container components</li>
      <li><strong>Components</strong>: Contains all the presentational (stateless) components</li>
      <li><strong>Config</strong>: Configuration-related files</li>
      <li><strong>Helpers</strong>: Contains helper modules</li>
      <li><strong>Layouts</strong>: Contains layout-like container components (more info below)</li>
      <li><strong>Stores</strong>: Contains the app store (more info below)</li>
    </ul>
  </div>
)

export default About
